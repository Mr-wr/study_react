
1、添加
npm i less less-loader@8
2、移除sass-loader
npm uninstall sass-loader
============================================================================
修改webpack.config.js配置
1、修改less配置
const cssRegex = /\.css$/;
const cssModuleRegex = /\.module\.css$/;
const lessRegex = /\.less$/;
const lessModuleRegex = /\.module\.less$/;

{
    test: lessRegex,
    exclude: lessModuleRegex,
    use: getStyleLoaders(
    {
        importLoaders: 3,
        sourceMap: isEnvProduction
        ? shouldUseSourceMap
        : isEnvDevelopment,
        modules: {
        mode: 'icss',
        },
    },
    'less-loader'
    ),
    // Don't consider CSS imports dead code even if the
    // containing package claims to have no side effects.
    // Remove this when webpack adds a warning or an error for this.
    // See https://github.com/webpack/webpack/issues/6571
    sideEffects: true,
},
// Adds support for CSS Modules, but using SASS
// using the extension .module.scss or .module.sass
{
    test: lessModuleRegex,
    use: getStyleLoaders(
    {
        importLoaders: 3,
        sourceMap: isEnvProduction
        ? shouldUseSourceMap
        : isEnvDevelopment,
        modules: {
        mode: 'local',
        getLocalIdent: getCSSModuleLocalIdent,
        },
    },
    'less-loader'
    ),
},

--------------------------------------------------------------------------------
2、修改路径别名
 alias: {
        "@": paths.appSrc,
        // Support React Native Web
        // https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/
        "react-native": "react-native-web",
        // Allows for better profiling with ReactDevTools
        ...(isEnvProductionProfile && {
          "react-dom$": "react-dom/profiling",
          "scheduler/tracing": "scheduler/tracing-profiling",
        }),
        ...(modules.webpackAliases || {}),
      },

-------------------------------------------------------------
3、cross-env
npm i cross-env
package.json
"scripts": {
    "start": "cross-env PORT=8080 node scripts/start.js",
    "build": "node scripts/build.js",
    "test": "node scripts/test.js"
},
-------------------------------------------------------
4、浏览器兼容
无法处理ES6内置API的兼容
在src/index.js下
/* 对ES6内置API兼容 */
import 'react-app-polyfill/ie11'
import 'react-app-polyfill/ie9'
import 'react-app-polyfill/stable'
----------------------------------------------------------
5、跨域处理
npm i http-proxy-middleware (跨域代理模块)
webpack-dev-server的跨域代理原理也是基于他来完成的
在src/下新建setupProxy.js
const { createProxyMiddleware } = require('http-proxy-middleware');

module.exports = function (app) {
  // 因为可能有多个代理
  app.use(
    // 发请求以这个开头的都
    createProxyMiddleware('/zhi', {
    //   target: 'https://www.zhihu.com/api/v4',
      target: 'https://news-at.zhihu.com/api/4',
    //   target: 'https://www.news-at.zhihu.com/api/4',
      changeOrigin: true,
      ws: true,
      pathRewrite: { '^/zhi': '' },
    })
  );
  app.use(
    // 发请求以这个开头的都
    createProxyMiddleware('/jian', {
      target: 'https://www.jianshu.com/asimov',
      changeOrigin: true,
      ws: true,
      pathRewrite: { '^/jian': '' },
    })
  );
};













